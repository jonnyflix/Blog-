<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jonas&#39; Data Science Blog</title>
    <link>https://jonnyflix.netlify.com/post/</link>
    <description>Recent content in Posts on Jonas&#39; Data Science Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](http://gohugo.io).</copyright>
    <lastBuildDate>Thu, 05 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jonnyflix.netlify.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Barplot</title>
      <link>https://jonnyflix.netlify.com/post/barplot/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jonnyflix.netlify.com/post/barplot/</guid>
      <description>A Barplot is a graph drawn using rectangular bars to show how large each value is.
Like before, we have to load our databases and switch off error messages first:
library(Lahman) library(sqldf) library(ggplot2) Next, we have to extract the data and store it in “result”:
query&amp;lt;-&amp;quot;SELECT name,HR FROM Teams WHERE yearID=1980 ORDER BY HR&amp;quot; result&amp;lt;-sqldf(query) We need to set the factor first so that our barplot will be in order from most to fewest homeruns.</description>
    </item>
    
    <item>
      <title>Histogram</title>
      <link>https://jonnyflix.netlify.com/post/histogram/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jonnyflix.netlify.com/post/histogram/</guid>
      <description>A Histogram is a graphical display where the data is grouped into ranges and then plotted as bars.
Like before, we have to load our databases and switch off error messages first:
library(Lahman) library(sqldf) library(ggplot2) This time, we want to illustrate the weight distribution of Baseball players. However, we are not going to show the data but storing it directly in “result”. Otherwise, the table would be too long because there are too many weight data entries.</description>
    </item>
    
    <item>
      <title>Scatterplot</title>
      <link>https://jonnyflix.netlify.com/post/scatterplot/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jonnyflix.netlify.com/post/scatterplot/</guid>
      <description>A scatter plot is a set of points plotted on a horizontal and vertical axes. It enables us two compare two sets of data.
First, we load our libraries and switch off error messages:
library(Lahman) library(sqldf) library(ggplot2) Then, we identified what we are looking for - career homeruns and strikeouts from players who had more than 400 homeruns:
query&amp;lt;-&amp;quot;SELECT playerID, sum(HR) AS career_HR,sum(SO) AS career_SO FROM Batting GROUP BY playerID HAVING sum(HR)&amp;gt;=400&amp;quot; sqldf(query) ## playerID career_HR career_SO ## 1 aaronha01 755 1383 ## 2 bagweje01 449 1558 ## 3 bankser01 512 1236 ## 4 beltrad01 445 1584 ## 5 beltrca01 421 1693 ## 6 bondsba01 762 1539 ## 7 cabremi01 446 1516 ## 8 cansejo01 462 1942 ## 9 dawsoan01 438 1509 ## 10 delgaca01 473 1745 ## 11 dunnad01 462 2379 ## 12 evansda01 414 1410 ## 13 foxxji01 534 1311 ## 14 gehrilo01 493 790 ## 15 giambja01 440 1572 ## 16 gonzaju03 434 1273 ## 17 griffke02 630 1779 ## 18 guerrvl01 449 985 ## 19 jacksre01 563 2597 ## 20 jonesan01 434 1748 ## 21 jonesch06 468 1409 ## 22 killeha01 573 1699 ## 23 kingmda01 442 1816 ## 24 konerpa01 439 1391 ## 25 mantlmi01 536 1710 ## 26 matheed01 512 1487 ## 27 mayswi01 660 1526 ## 28 mccovwi01 521 1550 ## 29 mcgrifr01 493 1882 ## 30 mcgwima01 583 1596 ## 31 murraed02 504 1516 ## 32 musiast01 475 696 ## 33 ortizda01 541 1750 ## 34 ottme01 511 896 ## 35 palmera01 569 1348 ## 36 piazzmi01 427 1113 ## 37 pujolal01 591 1053 ## 38 ramirma02 555 1813 ## 39 ripkeca01 431 1305 ## 40 robinfr02 586 1532 ## 41 rodrial01 696 2287 ## 42 ruthba01 714 1330 ## 43 schmimi01 548 1883 ## 44 sheffga01 509 1171 ## 45 snidedu01 407 1237 ## 46 soriaal01 412 1803 ## 47 sosasa01 609 2306 ## 48 stargwi01 475 1936 ## 49 teixema01 409 1441 ## 50 thomafr04 521 1397 ## 51 thomeji01 612 2548 ## 52 willibi01 426 1046 ## 53 willite01 521 709 ## 54 winfida01 465 1686 ## 55 yastrca01 452 1393 Next, we learnt how to save the results as a varible:</description>
    </item>
    
    <item>
      <title>Time Series Plot</title>
      <link>https://jonnyflix.netlify.com/post/time-series-plot/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jonnyflix.netlify.com/post/time-series-plot/</guid>
      <description>A Time Series Plot is displays values against time. Time is unfolding along the x-axis. THe y-axis, on the other hand, has some other variable and we can see how it changes over time.
Like before, we have to load our databases and switch off error messages first:
library(Lahman) library(sqldf) library(ggplot2) This time, we want to illustrate Babe Ruth’s homerun totals throughout the years.
query&amp;lt;-&amp;quot;SELECT yearID, HR FROM Batting WHERE playerID=&amp;#39;ruthba01&amp;#39;&amp;quot; sqldf(query) ## yearID HR ## 1 1914 0 ## 2 1915 4 ## 3 1916 3 ## 4 1917 2 ## 5 1918 11 ## 6 1919 29 ## 7 1920 54 ## 8 1921 59 ## 9 1922 35 ## 10 1923 41 ## 11 1924 46 ## 12 1925 25 ## 13 1926 47 ## 14 1927 60 ## 15 1928 54 ## 16 1929 46 ## 17 1930 49 ## 18 1931 46 ## 19 1932 41 ## 20 1933 34 ## 21 1934 22 ## 22 1935 6 Storing data in “results”:</description>
    </item>
    
  </channel>
</rss>